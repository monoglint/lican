; ==================================== ;
; std/memory.lican
; ==================================== ;

; @monoglint
; 8 October 2025
; This software uses the MIT license. Check LICENSE.txt 

use "std/hash"
use "std/thread"

module memory {
	dec __REF_CACHE: hash..map[u64, u8]
	dec __REF_CACHE_MUTEX: thread..mutex

    struct safe_ptr[T] {
        ctor(ptr: @T) -> raw(ptr) {
            dec as_number = bit_cast[u64](_raw)
            
            thread..lock_guard(__REF_CACHE_MUTEX)	

            if __REF_CACHE.contains(as_number)
                __REF_CACHE.set(as_number, __REF_CACHE.at(as_number) + 1)
            else
                __REF_CACHE.set(as_number, 1)
        }

        ctor(other: @safe_ptr)
            ctor(other._raw)

        dtor {
            thread..lock_guard(__REF_CACHE_MUTEX)

            dec as_number = bit_cast[u64](_raw)
            __REF_CACHE.set(as_number, __REF_CACHE.at(as_number) - 1)

            if __REF_CACHE.at(as_number) == 0
                free(_raw)
        }

        opr*(): T&
        return *_raw

        get(): @T
            return _raw

            priv _raw: @T
    }
}

;;

Source code
dec my_string = safe_ptr(alloc("Hello world"))

;;